# This file is interpreted as shell script.
# Put your custom iptables rules here, they will
# be executed with each firewall (re-)start.
#
#  The interfaces are labelled like so:
#  s* = secure, aka private network
#  g* = global, aka public network
#  *e* = ethernet
#  *w* = wireless
#
#  So for instance sw00 and sw10 are secure (aka private) WiFi nets.
#
#  se00 - 172.30.42.0-31: wired lan, can access everything.
#         172.30.42.32-63
#  sw00 - 172.30.42.64-95
#  sw10 - 172.30.42.96-127: private wifi, can access everything.
#  gw00 - 172.30.42.128-159: open wifi, can' access router
#  gw10, 01, 11: ranges above gw00, can access everything
#  ge00 - external ethernet, going to modem or other upstream.

# Allow forwarding in a NAT like way
# ip6tables -A FORWARD -i br-lan -j ACCEPT
# ip6tables -A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT

# Since we are doing complex forwarding elsewhere, can't do it that way
# and more complex ip6tables are bogus and slow in openwrt so

# These rules are still being debugged but may serve as an example
# 80 and 443 are already allowed in the main rules

# Because these rules are being inserted at the head of the list
# They are in reverse order


#add iptables rules for accounting

iptables -N lantoprivatewifi
iptables -N privatewifitolan

#Total to/from WAN
iptables -I FORWARD -j ACCOUNT --addr 0.0.0.0/0 --tname total-wan
#To/from Wired LAN
iptables -I FORWARD -j ACCOUNT --addr 172.30.42.0/27 --tname wired-lan
iptables -I FORWARD -s 172.30.42.0/27 -j lantoprivatewifi

#To/from Private WiFi
iptables -I FORWARD -j ACCOUNT --addr 172.30.42.96/27 --tname private-wifi
iptables -I FORWARD -s 172.30.42.96/27 -j privatewifitolan

#To/from OpenWiFi (first drop if necessary)


iptables -I INPUT -s172.30.42.128/27 -j DROP
iptables -I OUTPUT -d172.30.42.128/27 -j DROP

SERVER_IP="172.30.42.129"

# Allow public network clients to reach the DNS server on the router.
iptables -I INPUT -p udp -s 0/0 --sport 1024:65535 -d $SERVER_IP --dport 53 -m state --state NEW,ESTABLISHED -j ACCEPT
iptables -I OUTPUT -p udp -s $SERVER_IP --sport 53 -d 0/0 --dport 1024:65535 -m state --state ESTABLISHED -j ACCEPT
iptables -I INPUT -p udp -s 0/0 --sport 53 -d $SERVER_IP --dport 53 -m state --state NEW,ESTABLISHED -j ACCEPT
iptables -I OUTPUT -p udp -s $SERVER_IP --sport 53 -d 0/0 --dport 53 -m state --state ESTABLISHED -j ACCEPT


iptables -I FORWARD -j ACCOUNT --addr 172.30.42.128/27 --tname open-wifi
iptables -I FORWARD -s172.30.42.128/27 -d172.30.42.0/24 -j DROP
iptables -I FORWARD -s172.30.42.0/24 -d172.30.42.128/27 -j DROP


#rules to prevent spoofed guest traffic from getting past firewall
#iiptables -I FORWARD -i gw00 ! -s 172.30.42.128/27 -j DROP
#iptables -I FORWARD -i gw10 ! -s 172.30.42.160/27 -j DROP
#iptables -I INPUT -i gw00 ! -s 172.30.42.128/27 -j DROP
#iptables -I INPUT -i gw10 ! -s 172.30.42.160/27 -j DROP



#rules to accept DHCP traffic from guests
iptables -I INPUT  -p udp -i gw+ --sport 67:68 --dport 67:68 -j ACCEPT
iptables -I OUTPUT -p udp  --sport 67:68 --dport 67:68 -j ACCEPT


iptables -I lantoprivatewifi -j ACCOUNT --addr 172.30.42.96/27 --tname lantoprivatewifi

iptables -I privatewifitolan -j ACCOUNT --addr 172.30.42.0/27 --tname privatewifitolan


exit 0
#######Below here doesnt matter if exit 0 above###########




# These are some old rules not used anymore with the new firewall system.


TCPPORTS=22,222,636,873,53,25,587,993:994
TCPPORTS2=631,765,1024:65535,119,563
UDPPORTS=53,123,161:162
UDPPORTS2=500,517,518,631,1024:65535

# log the activity that will get dropped (optional)
ip6tables -I INPUT -j LOG
ip6tables -I FORWARD -j LOG
ip6tables -I OUTPUT -j LOG


# Allow crypto

iptables -I INPUT 1 -p 51 -j ACCEPT
iptables -I INPUT 1 -p 50 -j ACCEPT
iptables -I INPUT 1 -p 41 -j ACCEPT
iptables -I INPUT -p 2 -j ACCEPT                                  
ip6tables -I INPUT -p 2 -j ACCEPT                 
iptables -I FORWARD -p 2 -j ACCEPT

# Allow forwarding
#ip6tables -A FORWARD -i br-lan -j ACCEPT
#ip6tables -A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT

# Allow forwarding
#ip6tables -A FORWARD -i br-guest -j ACCEPT
#ip6tables -A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT

# Mail over ipv6 is safe because nobody uses it 

#ip6tables -A FORWARD -p tcp -d $MAILSERVER --dport 25 -j ACCEPT
#ip6tables -A FORWARD -p tcp -d $MAILSERVER --dport 143 -j ACCEPT
#ip6tables -A FORWARD -p tcp -d $MAILSERVER --dport 993 -j ACCEPT


# Set the default policy hopefully handled elsewhere
# ip6tables -P INPUT   DROP
# ip6tables -P FORWARD DROP
# ip6tables -P OUTPUT  DROP

# Allow anything on the local loopback link
ip6tables -I INPUT  -i lo -j ACCEPT
ip6tables -I OUTPUT -o lo -j ACCEPT

# Probably a good idea to rate limit this at least from the wan...

ip6tables -I INPUT  -p icmpv6 -j ACCEPT
ip6tables -I OUTPUT -p icmpv6 -j ACCEPT
ip6tables -I FORWARD -p icmpv6 -j ACCEPT

# Allow multicast
ip6tables -I INPUT -s ff00::/8 -j ACCEPT
ip6tables -I OUTPUT -s ff00::/8 -j ACCEPT
ip6tables -I FORWARD -s ff00::/8 -j ACCEPT

# Allow Link-Local addresses
ip6tables -I INPUT -s fe80::/10 -j ACCEPT
ip6tables -I OUTPUT -s fe80::/10 -j ACCEPT

# Allow anything out on the internet
ip6tables -I OUTPUT -o ge01-6to4 -j ACCEPT
ip6tables -I FORWARD -o ge01-6to4 -j ACCEPT

# Match against multiport

ip6tables -I FORWARD -p udp -m multiport --ports $UDPPORTS2 -j ACCEPT
ip6tables -I OUTPUT -p udp -m multiport --ports $UDPPORTS2 -j ACCEPT
ip6tables -I INPUT -p udp -m multiport --ports $UDPPORTS2 -j ACCEPT

ip6tables -I FORWARD -p udp -m multiport --ports $UDPPORTS -j ACCEPT
ip6tables -I OUTPUT -p udp -m multiport --ports $UDPPORTS -j ACCEPT
ip6tables -I INPUT -p udp -m multiport --ports $UDPPORTS -j ACCEPT

ip6tables -I FORWARD -p tcp -m multiport --ports $TCPPORTS2 -j ACCEPT
ip6tables -I OUTPUT -p tcp -m multiport --ports $TCPPORTS2 -j ACCEPT
ip6tables -I INPUT -p tcp -m multiport --ports $TCPPORTS2 -j ACCEPT

ip6tables -I FORWARD -p tcp -m multiport --ports $TCPPORTS -j ACCEPT
ip6tables -I OUTPUT -p tcp -m multiport --ports $TCPPORTS -j ACCEPT
ip6tables -I INPUT -p tcp -m multiport --ports $TCPPORTS -j ACCEPT

# Filter all packets that have RH0 headers:

ip6tables -I INPUT -m rt --rt-type 0 -j DROP
ip6tables -I FORWARD -m rt --rt-type 0 -j DROP
ip6tables -I OUTPUT -m rt --rt-type 0 -j DROP



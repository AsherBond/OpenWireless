#!/usr/bin/python

import json, re, common
from subprocess import check_output
from datetime import datetime

parser_pattern = re.compile('SRC packets: \d+ bytes: (\d+) DST packets: \d+ bytes: (\d+)')

def addcount(a,b):
  return map(sum, zip(map(int,a),map(int,b)))

def get_device_and_byte_counts(network_name):
  network_data = parser_pattern.findall(check_output(["/usr/sbin/iptaccount", "-l", network_name]))
  device_count=len(network_data)	
  if device_count==0:
    return [0, 0, 0]
  elif device_count==1:
    return [1].append(map(int,network_data[0]))
  else:
    return [device_count].append(reduce(addcount, network_data))  

[dev, privateWifiToLan, x] = get_device_and_byte_counts("privatewifitolan")
[dev, lanToPrivateWifi, x] = get_device_and_byte_counts("lantoprivatewifi")

[openWirelessDevices, openWirelessUploadUsage, openWirelessDownloadUsage] = get_device_and_byte_counts("open-wifi")
[internetUploadUsage, internetDownloadUsage] = [openWirelessUploadUsage, openWirelessDownloadUsage] 

[lanNetworkDevices, lanNetworkUploadUsage, lanNetworkDownloadUsage] = get_device_and_byte_counts("wired-lan")
lanNetworkUploadUsage -= lanToPrivateWifi
lanNetworkDownloadUsage -= privateWifiToLan
internetUploadUsage += lanNetworkUploadUsage
internetDownloadUsage += lanNetworkDownloadUsage

[privateWifiDevices, privateWifiUploadUsage, privateWifiDownloadUsage] = get_device_and_byte_counts("private-wifi")
privateWifiUploadUsage -= privateWifiToLan
privateWifiDownloadUsage -= lanToPrivateWifi
internetUploadUsage += privateWifiUploadUsage
internetDownloadUsage += privateWifiDownloadUsage


result = {
  "internet": {
    "uploadUsage"   : internetUploadUsage,
    "downloadUsage" : internetDownloadUsage
  },
  "lanNetwork": {
    "uploadUsage"   : lanNetworkUploadUsage,
    "downloadUsage" : lanNetworkDownloadUsage,
    "devices"       : lanNetworkDevices
  },
  "privateWifi": {
    "uploadUsage"   : privateWifiUploadUsage,
    "downloadUsage" : privateWifiDownloadUsage,
    "devices"       : privateWifiDevices
  },
  "openWireless": {
    "uploadUsage"   : openWirelessUploadUsage,
    "downloadUsage" : openWirelessDownloadUsage
  },
  "dateTime" : datetime.now().isoformat()
}

print "Content-Type:application/json\r\n"
print json.JSONEncoder().encode(result)

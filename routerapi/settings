#!/usr/bin/python

# Import modules for CGI handling
import cgi, json
from subprocess import check_output, CalledProcessError

#import auth

software_version = open("/etc/openwrt_release").read().split('\n')[1].split("\"")[1]

class Interface:
  def __init__(self, name):
    self.name = name 
    self.channel = check_output("uci show wireless | grep " + name + " | grep channel", shell=True).split("=")[1]
    self.band = check_output("uci show wireless | grep " + name + " | grep band", shell=True).split("=")[1]
    self.channel_bandwidth = check_output("uci show wireless | grep " + name + " | grep chanbw", shell=True).split("=")[1]

openwireless = Interface("wifi-iface")
router = Interface("wifi-iface")
def check_device(config_name):
  try:
    return check_output(["uci", "get", "wireless." + config_name + ".device"]).strip()
  except CalledProcessError:
    return "ERROR"

def check_param(device, param):
  try:
    return check_output(["uci", "get", "wireless." + device + "." + param]).strip()
  except CalledProcessError:
    return "ERROR"

def get_attributes(interface, config_name):
  interface["device"] = check_device(config_name)
  if interface["device"] == "radio0" :
    interface["band"] = "2.4"
  else:
    interface["band"] = "5"  
  interface["channel"] = check_param(interface["device"], "channel")
  if check_param(interface["device"], "htmode") == "HT20":
    interface["channel_bandwidth"] = "20"
  elif check_param(interface["device"], "htmode") == "HT40":
    interface["channel_bandwidth"] = "40"
  else:
    interface["channel_bandwidth"] = "none"

private = {}
open_wireless = {}

get_attributes(private, "@wifi-iface[0]")
get_attributes(open_wireless, "@wifi-iface[1]")

result = {
	"result": {
	  "softwareVersion"               : software_version,
	  "ispDownloadSpeed"              : "12.8",
	  "ispUploadSpeed"                : "3.6",
	  "softwareVersionUpdateDate"     : "16/06/2014",
	  "lastCheckedDate"               : "18/06/2014",
	  "routerBand"                    : router.band,
	  "routerChannel"                 : router.channel,
	  "routerCustomChannel"           : "??",
	  "routerChannelBandwidth"        : router.channel_bandwidth,
	  "routerVpnConfiguration"        : "None",
	  "openwirelessBandwidth"         : "5",
	  "openwirelessData"              : "30",
	  "openwirelessBand"              : openwireless.band,
	  "openwirelessChannel"           : openwireless.channel,
	  "openwirelessCustomChannel"     : "??",
	  "openwirelessChannelBandwidth"  : openwireless.channel_bandwidth,
	  "openwirelessVpnConfiguration"  : "None",
    "openwirelessProtocol"          : "HTTPS",
    "openwirelessEncryption"        : "Unencrypted",
	  "wanIp" : "192.168.1.4",
	  "lanIp" : "184.251.4.14"
	}
}

print "Content-Type: application/json\r\n\r\n"
print json.JSONEncoder().encode(result)

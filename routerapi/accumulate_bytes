#!/usr/bin/python

import datetime
import time
import uci
from subprocess import check_output
from get_bytecounts import get_device_and_byte_counts

def update_openwireless_usage():

    #times are in seconds
    last_known_reset_time = float(uci.get("openwireless.last_known_reset_time"))
    current_time = time.time()
    recorded_time_since_reset = current_time - last_known_reset_time
    
    uptime_output = check_output(["cat", "/proc/uptime"])
    real_time_since_reset = float(uptime_output.split(" ")[0])
    
    time_difference = abs(real_time_since_reset - recorded_time_since_reset)
    acceptable_error_between_times = 3600
    
    def increment_use_before_last_reset():
        use_since_reset = float(uci.get("openwireless.use_since_last_reset"))
        use_before_reset = float(uci.get("openwireless.use_before_last_reset"))

        new_use_before_reset = str(int(use_since_reset + use_before_reset))
        uci.set("openwireless.use_before_last_reset", new_use_before_reset)

    def increment_use_since_last_reset():
        [x, upload_usage, download_usage] = get_device_and_byte_counts("open-wifi")
        new_use_after_reset = download_usage + upload_usage
        use_before_ui_reset = float(uci.get("openwireless.use_before_last_reset"))
        new_use = str(int(new_use_after_reset - use_before_ui_reset))
        uci.set("openwireless.use_since_last_reset", new_use) 

    def reset_last_known_reset_time():
        uci.set("openwireless.last_known_reset_time", str(current_time - real_time_since_reset))

    def reset_use_at_last_ui_reset():
        uci.set("openwireless.use_at_last_ui_reset", "0")
    if time_difference > acceptable_error_between_times:
        increment_use_before_last_reset()
        increment_use_since_last_reset()
        reset_last_known_reset_time()
        reset_use_at_last_ui_reset()

    else:
        increment_use_since_last_reset()

update_openwireless_usage()
#disable network if data use over limit
uci.commit("openwireless")






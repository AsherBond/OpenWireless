#!/usr/bin/python

import os, json, sys, common, uci
from subprocess import check_output, call


environ = os.environ
params = {}
band_5_channel_options = ['auto',
  '36 (5.180 GHz)', '40 (5.200 GHz)', '44 (5.220 GHz)', '48 (5.240 GHz)',
  '149 (5.745 GHz)', '153 (5.765 GHz)', '159 (5.785 GHz)', '161 (5.805 GHz)',
  '165 (5.825 GHz)']
band_2p4_channel_options = ['auto',
  '1 (2.412 GHz)', '2 (2.417 GHz)', '3 (2.422 GHz)', '4 (2.427 GHz)',
  '5 (2.432 GHz)', '6 (2.437 GHz)', '7 (2.442 GHz)', '8 (2.447 GHz)',
  '9 (2.452 GHz)', '10 (2.457 GHz)', '11 (2.462 GHz)', '12 (2.467 GHz)']

uci_path = "/sbin/uci"

def check_device(config_name):
  return check_output([uci_path, "get", "wireless." + config_name + ".device"]).strip()

def check_param(device, param):
  return check_output([uci_path, "get", "wireless." + device + "." + param]).strip()

def validate_channel(device, channel):
  if device == 'radio1':
    return channel in band_5_channel_options
  else:
    return channel in band_2p4_channel_options

def validate_bandwidth(new_bandwidth):
  return new_bandwidth in ['20', '40']

def set_param(device, param, value):
  call([uci_path, "set", "wireless." + device + "." + param + "=" + value])
  call([uci_path, "commit", "wireless"])

def set_error(param):
  params['error'] = 'Invalid ' + param

def check_band(band_name, interface_name):
  if params.get(band_name):
      if params.get(band_name) in ["2.4", "5"]:
        current_band = check_device(interface_name)

        if current_band == "radio0":
          new_band = "radio1"

        else:
          new_band = "radio0"

        set_param(interface_name, "device", new_band)

      else:
        set_error('band')

def check_channel(channel_name, interface_name):
  if params.get(channel_name):
    current_device = check_device(interface_name)
    new_channel = params.get(channel_name)
    if validate_channel(current_device, new_channel):
      set_param(current_device, 'channel', new_channel.split(' ')[0])

    else:
      set_error('channel')

def check_channel_bandwidth(channel_name, interface_name):
  if params.get(channel_name):
    current_device = check_device(interface_name)
    new_bandwidth = params.get(channel_name)
    if validate_bandwidth(new_bandwidth):
      set_param(current_device, 'htmode', "HT" + new_bandwidth)
    else:
      set_error('channel bandwidth')

def retrieve_SSH_Key():

    if (params.get("ssh_key")):
        with open("../../../etc/dropbear/authorized_keys", "a") as authenticated_keys:
            authenticated_keys.write(params.get("ssh_key"))
    else:
        set_error('Invalid SSH Key')
 
def check_openwireless_bandwidth_percentage()
    if (params.get("openwirelessBandwidth")):
      new_bandwidth = params.get("openwirelessBandwidth")
      uci.set("openwireless.maxbandwidthpercentage=" + new_bandwidth)

def check_openwireless_monthly_data()
    if (params.get("openwirelessData")):
      new_bandwidth = params.get("openwirelessData")
      uci.set("openwireless.maxmonthlybandwidth=" + new_bandwidth)

if environ.get('REQUEST_METHOD', 'GET').lower() == 'post':
    json_body = json.loads(sys.stdin.read())

    for k in json_body.keys():
        params[k] = json_body[k]

    check_band('routerBand', "@wifi-iface[0]")
    check_channel('routerChannel', "@wifi-iface[0]")
    check_channel_bandwidth('routerChannelBandwidth', "@wifi-iface[0]")

    check_band('openwirelessBand', "@wifi-iface[1]")
    check_channel('openwirelessChannel', "@wifi-iface[1]")
    check_channel_bandwidth('openwirelessChannelBandwidth', "@wifi-iface[1]")
    
    check_openwireless_bandwidth_percentage()
    check_openwireless_monthly_data()

else:
  set_error('GET request')


print "Content-Type:application/json\r\n"
print json.JSONEncoder().encode(params)
